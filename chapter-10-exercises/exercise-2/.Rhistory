max(round_sum, sum_round)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Amanda"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 8
fav_2 <- 87
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, 32)
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
fruits <- substr(lyric, 15, nchar(lyric))
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro + fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
?print
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
say_hello <- function(name) {
gretting <- paste("Hello", name)
print(greeting)
}
say_hello("class")
say_hello <- function(name) {
gretting <- paste("Hello", name)
print(greeting)
}
say_hello("class")
say_hello <- function(name) {
greeting <- paste("Hello", name)
print(greeting)
}
say_hello("class")
add_three <- function(number) {
return(number + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
return((feet * 12 + inches) / 39.37)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 3)
dogs <- c("Fido", "Sparky", "Spot")
print(dogs)
dogs <- c("Fido","Sparky", "Spot")
print(dogs)
dogs <- c("Fido", "Sparky", "Spot")
print(dogs)
hundred_nums <- 1:100
print(hundred_nums)
v1 <- c(3, 1, 4, 1, 5)
v2 <- c(1, 6, 1, 8, 0)
v1 > v2
v3 <- c(3, 1, 4, 1, 5)
v4 <- c(10, 100)
v3 + v4
v5 <- 0:5
v5 + 201
random <- runif(10)
rounded <- round(random, 2)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Amanda", "Tia", "Steven")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
?seq
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
?sin()
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten:next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
print(all_numbers)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
same_numbers <- all_numbers[2:5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
numbers <- 1:100
even <- numbers[numbers / 2 = 0]
even <- numbers[numbers / 2 == 0]
numbers <- 1:100
even <- numbers[numbers / 2 == 0]
?%%
?all
even <- numbers[numbers / 2]
is_even <- numbers / 2 == 0
is_even <- numbers %% 2 == 0
even <- numbers[numbers %% 2 == 0]
print(even)
even <- numbers[numbers %% 2 == 0]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even) %% 2 == 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
filter <- phone_numbers[phone_numbers == large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
filter <- phone_numbers == large
?replace
replace(phone_numbers, filter, 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, phone_numbers[phone_numbers > 5], 5)
filter
replace(phone_numbers, phone_numbers[large], 5)
replace(phone_numbers, phone_numbers == large, 5)
replace(phone_numbers, phone_numbers > 5, 5)
# Replace every odd-numbered value in `phone_numbers` with the number 0
replace(phone_numbers, phone_numbers %% 2 == 1, 0)
list(name = "Ada", age = 21, did_homework = TRUE)
print(list(name = "Ada", age = 21, did_homework = TRUE))
person <- list(name = "Ada", age = 21, did_homework = TRUE)
person$name
person <- list(first_name = "Ada", lastt_name = "Smith", age = 21, did_homework = TRUE)
person$name
which_name <- "last"
paste(which_name, "_name", sep = "")
paste0(which_name, "_name")
person[[paste0(which_name, "_name")]]
person <- list(first_name = "Ada", last_name = "Smith", age = 21, did_homework = TRUE)
person$name
which_name <- "last"
paste(which_name, "_name", sep = "")
paste0(which_name, "_name")
person[[paste0(which_name, "_name")]]
which_name <- "last_name"
person$which_name
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("mantou", "maple tea", "milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("pad see ew")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- "curry udon"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[["my_lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[["lunch"]]
print(meals)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[["lunch"]]
print(meals)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[c("breakfast", "lunch")]
meals <- list(my_breakfast, my_lunch)
print(meals)
meals <- list(my_breakfast, my_lunch)
print(meals)
meals$dinner <- "curry udon"
meals[[5]] <- meals[["my_lunch"]]
print(meals)
early_meals <- list(meals[c("breakfast", "lunch")])
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
print(meals)
meals$dinner <- "curry udon"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
meals[[5]] <- meals[["my_lunch"]]
print(meals)
early_meals <- list(meals[c("breakfast", "lunch")])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_of_breakfast <- length(meals$)
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
length(meals$breakfast)
length(meals$lunch)
length(meals$dinner)
num_items <- lapply(meals, length)
print(num_items)
#add pizza to that vector
new_vector <- c(meal_vector, "pizza")
add_pizza <- function(meal_vector) {
#add pizza to that vector
new_vector <- c(meal_vector, "pizza")
#return the new vector
return(new_vector)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
print(better_meals)
add_pizza("nachos")
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals, add_pizza)
?lapply
install.packages("stringr")
#install.packages("stringr")
library("stringr")
#install.packages("stringr")
library("stringr")
sentence <- "The quick brown fox jumped over the lazy dog"
# Get words 2 through 4 of the sentence
word(sentence, 2, 4)
sentence <- "The quick brown fox jumped over the lazy dog"
# Get words 2 through 4 of the sentence
word(sentence, 2, 4) # "quick brown fox"
today_date <- as.Date(today)
today <- "2020-01-021"
today_date <- as.Date(today)
add_pizza <- function(meal_vector) {
#add pizza to that vector
new_vector <- c(meal_vector, "pizza")
#return the new vector
return(new_vector)
}
add_pizza("nachos")
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(sharks, Goblin)
print(updated_sharks)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes> 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered(filter))
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[-4]
shark_length[4]
is.list(shark_length)
class(shark_length[4])
shark_length[[4]]
is.list(shark_length)
shark_length[[4]]
is.list(shark_length[[4]])
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades[["is_participant"]] <- "Yes"
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[["is_participant"]] <- "Yes"
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
total_with_discount <- (tea + 2*scone) + discount
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * discount
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * sales_tax
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 + sales_tax)
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
updated_sharks <- c(sharks, Goblin)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
earthquakes[> 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[> 6.5]
earthquakes[earthquakes> 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
lab_grades[["is_participant"]] <- "Yes"
shark_length[-4]
shark_length[[-4]]
shark_length[[4]]
is.list(shark_length[[4]])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
?ruhif
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
print(salaries)
?data.frame
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries_2017 + adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > 0
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
max(salaries$adjustments)
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == biggest_raise]
salaries[salaries$adjustments == biggest_raise, ]
# What was the dollar value of the highest raise?
# biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == max(salaries$adjustments), ]
# What was the dollar value of the highest raise?
# biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments < 0, )
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments < 0)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments[salaries$adjustments < 0])
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, "adjustments"]
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustments[salaries$adjustments < 0])
mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
mean(salaries[salaries$got_raise == FALSE, "adjustments"])
setwd("~/Desktop/School/Uni/Wi_20/INFO_201/book-exercises/chapter-10-exercises/exercise-2")
getwd()
?write.csv
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries")
