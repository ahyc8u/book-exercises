}
#
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
calc_survival_rate <- function(tix_class) {
ticket_class <- titanic_df[titanic_df$Class == tix_class, ]
adult_men <- ticket_class[ticket_class$Sex == "Male" & ticket_class$Age == "Adult", ]
men_survival_rate <- round((sum(adult_men[adult_men$Survived == "Yes", ]$Freq) /
sum(adult_men$Freq)) * 100, digits = 0)
womenchildren <- ticket_class[(ticket_class$Sex == "Female" & ticket_class$Age == "Adult") |
(ticket_class$Age == "Child"), ]
womenchildren_survival_rate <- round((sum(womenchildren[womenchildren$Survived == "Yes", ]$Freq) /
sum(womenchildren$Freq)) * 100, digits = 0)
return(paste("Of ", tix_class, " class, ", men_survival_rate, "% of men survived and ",
womenchildren_survival_rate, "% of women and children survived.", sep = ""))
}
#
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
print(num_children)
print(most_losses)
setwd("~/Desktop/School/Uni/Wi_20/INFO_201/Assignments/a3-using-data-ahyc8u")
# Creates a variable "life_exp_df" that contains the contents of the "life_expectancy_years.csv" file
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
View(life_exp_df)
#
vector <- c(1, 2, 3, 4)
mean(vector)
get_col_mean <- function(data_col) {
return(mean(data_col, na.rm = TRUE))
}
#################
#### PART 1 #####
#################
# Creates a vector variable "tas" that contains names of the 8 TAs in this course
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
# Create a vector variable "math_grades" that contains 8 random numbers representing
# grades in a math course, with mean 3.6 and sd 0.4
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
# Creates a vector variable "spanish_grades" that contains 8 random numbers representing
# grades in a Spanish course, with mean 3.8 and sd 0.25.
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
# Creates a variable "ta_grades" that is a data frame with the three vectors above
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Creates a string variable "table_description" that describes the table with its number
# of rows, number of columns, and a comma-separated list of the column names.
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades), "rows and",
ncol(ta_grades), "cols:", colnames_string)
print(table_description)
# Assigns a new vector of column names to the table, renaming them to be in single
# form instead of plural
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
# Adds a column "better_at_math" to "ta_grades", containing boolean values that
# show whether the TA got a higher grade in math than in Spanish
ta_grades$better_at_math <- ta_grades$math_grade > ta_grades$spanish_grade
# Prints out the row of the data frame with my TA's (section AA) grades, using bracket
# notation and a filter vector
print(ta_grades[ta_grades$ta == "Phuong Vu", ])
# Creates a variable "num_better_at_math" that is the count of how many TAs are better at math
# and prints it
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
print(num_better_at_math)
# Assigns grade values that are greater than 4.0 to 4.0
ta_grades[ta_grades$math_grade > 4.0, "math_grade"] <- 4.0
ta_grades[ta_grades$spanish_grade > 4.0, "spanish_grade"] <- 4.0
# Writes a .csv file with the filename "grade_data.csv" of the "ta_grades" data frame to the
# data/ folder in the assignment's repo
write.csv(ta_grades, "data/grade_data.csv")
#################
#### PART 2 #####
#################
# Loads the "Titanic" data set that is built into R
data("Titanic")
# View(Titanic)
# Confirms that the "Titanic" data set is not a data frame (it's a table!)
print(is.data.frame(Titanic))
# Creates a variable "titanic_df" that is a data frame version of the Titanic variable
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Creates a variable "children" that contains information rows about children on the Titanic
children <- titanic_df[titanic_df$Age == "Child", ]
# Creates a variable "num_children" that is the total number of children on the Titanic and prints it
num_children <- sum(children$Freq)
print(num_children)
# Creates a variable "most_losses" that represents the row of the largest number of people
# who did not survive in "titanic_df" and prints it
did_not_survive <- titanic_df[titanic_df$Survived == "No", ]
most_losses <- did_not_survive[did_not_survive$Freq == max(did_not_survive$Freq), ]
print(most_losses)
# Defines a function "calc_survival_rate" that takes in a ticket class returns a sentence
# describing the survival rates of adult men vs. that of the combined women and children
# within that ticketing class
calc_survival_rate <- function(tix_class) {
# filter for the given ticket class
ticket_class <- titanic_df[titanic_df$Class == tix_class, ]
# filter for the adult men in the given class
adult_men <- ticket_class[ticket_class$Sex == "Male" & ticket_class$Age == "Adult", ]
# calculate the rounded percentage of men survival rate by dividing number survived by total number
men_survival_rate <- round((sum(adult_men[adult_men$Survived == "Yes", ]$Freq) /
sum(adult_men$Freq)) * 100, digits = 0)
# filter for the adult women and all children in the given class
womenchildren <- ticket_class[(ticket_class$Sex == "Female" & ticket_class$Age == "Adult") |
(ticket_class$Age == "Child"), ]
# calculate the rounded percentage of women and children survival rate
womenchildren_survival_rate <- round((sum(womenchildren[womenchildren$Survived == "Yes", ]$Freq) /
sum(womenchildren$Freq)) * 100, digits = 0)
return(paste("Of ", tix_class, " class, ", men_survival_rate, "% of men survived and ",
womenchildren_survival_rate, "% of women and children survived.", sep = ""))
}
# Prints the results of the survival rates for all ticketed classes, calculated
# by calling the above function "calc_survival_rate"
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
# Data analysis:
# 1. The survival rates for both men and women plus children of the 1st class is about double the
# survival rates of the 3rd class. Also, the higher the class is, the higher the survival rate is,
# except for the men of 2nd class.
# 2. In each ticket class, the "women and children" group has a way higher survival rate than that
# of the men group.
#################
#### PART 3 #####
#################
# Original Sources: 1800-1970 - Mattias Lindgren, 1970-2016 - 'Global Burden of Disease Study
# 2016' from the Institute for Health Metrics and Evaluation (IHME), 2017-2099 - 'World Population
# Prospects 2017' from UN
# Creates a variable "life_exp_df" that contains the contents of the "life_expectancy_years.csv" file
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# View(life_exp_df)
#
get_col_mean <- function(data_col) {
return(mean(data_col, na.rm = TRUE))
}
#
life_exp_df$X2018
#
print(get_col_mean(life_exp_df$X2018))
# Prints out the result of the average life expectancy in 2018 calculated by calling the
# "get_col_mean" function
print(get_col_mean(life_exp_df$X2018))
?lapply
View(life_exp_df)
# Creates a variable "world_averages" that is a list of the average life expectancies for each year
# in the data set
world_averages <- lapply(life_exp_df[, 2:102], get_col_mean)
View(world_averages)
# Creates a variable "world_averages" that is a list of the average life expectancies for each year
# in the data set
world_averages <- lapply(life_exp_df[, -1], get_col_mean)
# Creates a variable "world_averages" that is a list of the average life expectancies for each year
# in the data set
world_averages <- lapply(life_exp_df[, -1], get_col_mean)
View(world_averages)
View(world_averages)
# Creates a variable "world_change_18" that is the difference between the world average life
# expectancy in 1918 and in 2018 and prints it out
world_change_18 <- world_averages[101] - world_averages[1]
# Creates a variable "world_change_18" that is the difference between the world average life
# expectancy in 1918 and in 2018 and prints it out
world_change_18 <- world_averages$X2018 - world_averages$X1918
# Creates a variable "world_change_18" that is the difference between the world average life
# expectancy in 1918 and in 2018 and prints it out
print(world_change_18 <- world_averages$X2018 - world_averages$X1918)
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# Adds a column "recent_change" to "life_exp_df" that contains the change in life expectancy
# from 1996 to 2016.
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# Creates a variable "num_small_gain" that has the number of countries whose life expectancy
# did not improve by 1 year or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df$recent_change < 1)
# Creates a variable "num_small_gain" that has the number of countries whose life expectancy
# did not improve by 1 year or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1])
# Creates a variable "num_small_gain" that has the number of countries whose life expectancy
# did not improve by 1 year or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
life_exp_df[life_exp_df$recent_change < 1, ]
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
# Creates a variable "most_improved" that is the name of the country with the largest gain in
# life expectancy between 1996 and 2016 and prints it out
max(life_exp_df$recent_change, na.rm = TRUE)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE),
"country"]
print(most_improved)
# Defines a function "get_country_change" that takes in a country's name and a life expectancy data
# frame ("life_exp_df"), and returns the change in life expectancy from 1968 to 2018 of that country
life_exp_df[life_exp_df$country == "Japan"]
# Defines a function "get_country_change" that takes in a country's name and a life expectancy data
# frame ("life_exp_df"), and returns the change in life expectancy from 1968 to 2018 of that country
life_exp_df[life_exp_df$country == "Japan", ]
# Defines a function "get_country_change" that takes in a country's name and a life expectancy data
# frame ("life_exp_df"), and returns the change in life expectancy from 1968 to 2018 of that country
japan <- life_exp_df[life_exp_df$country == "Japan", ]
japan$X2018 - japan$X1968
get_country_change <- function(country, df) {
data_row <- df[df$country == country, ]
return(data_row$X2018 - data_row$X1968)
}
# Use your get_country_change() to get the change in life expectancy between 1968 and 2018 in Haiti. Print the result of your function
print(get_country_change("Haiti", life_exp_df))
print(get_country_change("Haiti", life_exp_df))
life_exp_df[life_exp_df$country == "China", "X2018" & "recent_change"]
life_exp_df[life_exp_df$country == "China", "X2018"]
life_exp_df$country == "China", "X2018"
life_exp_df[life_exp_df$country == "China", ]
life_exp_df[life_exp_df$country == "China", 102:103]
life_exp_df[life_exp_df$country == "China", -2:-101]
life_exp_df[life_exp_df$country == "China", -(2:101)]
life_exp_df[life_exp_df$country == "China" & life_exp_df$country == "Bolivia", -(2:101)]
life_exp_df[life_exp_df$country == "China", -(2:101)]
life_exp_df[(life_exp_df$country == "China") & (life_exp_df$country == "Bolivia"), -(2:101)]
life_exp_df[(life_exp_df$country == "China") && (life_exp_df$country == "Bolivia"), -(2:101)]
life_exp_df[(life_exp_df$country == "China") | (life_exp_df$country == "Bolivia"), -(2:101)]
compare_countries <- function(country1, country2, df) {
return(df[(df$country == country1) | (df$country == country2), -(2:101)])
}
#
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
View(us_vs_cuba)
#################
#### PART 1 #####
#################
# Creates a vector variable "tas" that contains names of the 8 TAs in this course
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
# Create a vector variable "math_grades" that contains 8 random numbers representing
# grades in a math course, with mean 3.6 and sd 0.4
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
# Creates a vector variable "spanish_grades" that contains 8 random numbers representing
# grades in a Spanish course, with mean 3.8 and sd 0.25.
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
# Creates a variable "ta_grades" that is a data frame with the three vectors above
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Creates a string variable "table_description" that describes the table with its number
# of rows, number of columns, and a comma-separated list of the column names.
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades), "rows and",
ncol(ta_grades), "cols:", colnames_string)
print(table_description)
# Assigns a new vector of column names to the table, renaming them to be in single
# form instead of plural
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
# Adds a column "better_at_math" to "ta_grades", containing boolean values that
# show whether the TA got a higher grade in math than in Spanish
ta_grades$better_at_math <- ta_grades$math_grade > ta_grades$spanish_grade
# Prints out the row of the data frame with my TA's (section AA) grades, using bracket
# notation and a filter vector
print(ta_grades[ta_grades$ta == "Phuong Vu", ])
# Creates a variable "num_better_at_math" that is the count of how many TAs are better at math
# and prints it
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
print(num_better_at_math)
# Assigns grade values that are greater than 4.0 to 4.0
ta_grades[ta_grades$math_grade > 4.0, "math_grade"] <- 4.0
ta_grades[ta_grades$spanish_grade > 4.0, "spanish_grade"] <- 4.0
# Writes a .csv file with the filename "grade_data.csv" of the "ta_grades" data frame to the
# data/ folder in the assignment's repo
write.csv(ta_grades, "data/grade_data.csv")
#################
#### PART 2 #####
#################
# Loads the "Titanic" data set that is built into R
data("Titanic")
# View(Titanic)
# Confirms that the "Titanic" data set is not a data frame (it's a table!)
print(is.data.frame(Titanic))
# Creates a variable "titanic_df" that is a data frame version of the Titanic variable
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Creates a variable "children" that contains information rows about children on the Titanic
children <- titanic_df[titanic_df$Age == "Child", ]
# Creates a variable "num_children" that is the total number of children on the Titanic and prints it
num_children <- sum(children$Freq)
print(num_children)
# Creates a variable "most_losses" that represents the row of the largest number of people
# who did not survive in "titanic_df" and prints it
did_not_survive <- titanic_df[titanic_df$Survived == "No", ]
most_losses <- did_not_survive[did_not_survive$Freq == max(did_not_survive$Freq), ]
print(most_losses)
# Defines a function "calc_survival_rate" that takes in a ticket class returns a sentence
# describing the survival rates of adult men vs. that of the combined women and children
# within that ticketing class
calc_survival_rate <- function(tix_class) {
# filter for the given ticket class
ticket_class <- titanic_df[titanic_df$Class == tix_class, ]
# filter for the adult men in the given class
adult_men <- ticket_class[ticket_class$Sex == "Male" & ticket_class$Age == "Adult", ]
# calculate the rounded percentage of men survival rate by dividing number survived by total number
men_survival_rate <- round((sum(adult_men[adult_men$Survived == "Yes", ]$Freq) /
sum(adult_men$Freq)) * 100, digits = 0)
# filter for the adult women and all children in the given class
womenchildren <- ticket_class[(ticket_class$Sex == "Female" & ticket_class$Age == "Adult") |
(ticket_class$Age == "Child"), ]
# calculate the rounded percentage of women and children survival rate
womenchildren_survival_rate <- round((sum(womenchildren[womenchildren$Survived == "Yes", ]$Freq) /
sum(womenchildren$Freq)) * 100, digits = 0)
return(paste("Of ", tix_class, " class, ", men_survival_rate, "% of men survived and ",
womenchildren_survival_rate, "% of women and children survived.", sep = ""))
}
# Prints the results of the survival rates for all ticketed classes, calculated
# by calling the above function "calc_survival_rate"
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
# Data analysis:
# 1. The survival rates for both men and women plus children of the 1st class is about double the
# survival rates of the 3rd class. Also, the higher the class is, the higher the survival rate is,
# except for the men of 2nd class.
# 2. In each ticket class, the "women and children" group has a way higher survival rate than that
# of the men group.
#################
#### PART 3 #####
#################
# Original Sources: 1800-1970 - Mattias Lindgren, 1970-2016 - 'Global Burden of Disease Study
# 2016' from the Institute for Health Metrics and Evaluation (IHME), 2017-2099 - 'World Population
# Prospects 2017' from UN
# Creates a variable "life_exp_df" that contains the contents of the "life_expectancy_years.csv" file
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# View(life_exp_df)
# Defines a function "get_col_mean" which takes in a vector that is a single column of a data frame
# and returns the mean of that column
get_col_mean <- function(data_col) {
return(mean(data_col, na.rm = TRUE))
}
# Prints out the result of the average life expectancy in 2018 calculated by calling the
# "get_col_mean" function
print(get_col_mean(life_exp_df$X2018))
# Creates a variable "world_averages" that is a list of the average life expectancies for each year
# in the data set
world_averages <- lapply(life_exp_df[, -1], get_col_mean)
# Creates a variable "world_change_18" that is the difference between the world average life
# expectancy in 1918 and in 2018 and prints it out
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# Adds a column "recent_change" to "life_exp_df" that contains the change in life expectancy
# from 1996 to 2016.
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# Creates a variable "num_small_gain" that has the number of countries whose life expectancy
# did not improve by 1 year or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# Creates a variable "most_improved" that is the name of the country with the largest gain in
# life expectancy between 1996 and 2016 and prints it out
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE),
"country"]
print(most_improved)
# Defines a function "get_country_change" that takes in a country's name and a life expectancy data
# frame ("life_exp_df"), and returns the change in life expectancy from 1968 to 2018 of that country
get_country_change <- function(country_name, df) {
data_row <- df[df$country == country_name, ]
return(data_row$X2018 - data_row$X1968)
}
# Prints out the result of the change in life expectancy between 1968 and 2018 in Haiti by calling
# the "get_country_change" function
print(get_country_change("Haiti", life_exp_df))
# Defines a function "compare_countries" that takes in two country names as strings, and a life
# expectancy data frame ("life_exp_df"), and returns a new data frame representing a table of
# the life expectancies of the two countries in 2018 and the recent change between 1996 and 2016.
compare_countries <- function(country1, country2, df) {
return(df[(df$country == country1) | (df$country == country2), -(2:101)])
}
# Creates a variable "us_vs_cuba" which stores the data frame that compares the life expectancy
# changes of the United States and Cuba by calling the "compare_countries" function, and prints it
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
# The base URI
base_uri <- "https://api.themoviedb.org/3"
?source
# Creates an API key
api_key <- source("apikey.R")
setwd("~/Desktop/School/Uni/Wi_20/INFO_201/Assignments/a5-data-report-ahyc8u")
# Creates an API key
api_key <- source("apikey.R")
View(api_key)
#
key_param <- list(api_key = tmdb_key)
View(key_param)
#
key_param <- list("api_key" = tmdb_key)
library("httr")
library("jsonlite")
# Gets the data
GET(key_param)
# Gets the data
GET(paste0(base_uri, key_param))
View(api_key)
# Stores API key from TMDB in a variable
tmdb_key <- "7765a39b4cb2564602f38ae81831ec59"
path <- "/movie/550"
resource_uri <- paste0(base_uri, path, key_param)
resource <- GET(resource_uri)
View(resource)
resource_uri <- paste0(base_uri, path)
resource <- GET(resource_uri, query = key_param)
View(resource)
path <- "/movie/550"
resource_uri <- paste0(base_uri, path)
resource <- GET(resource_uri, query = key_param)
View(resource)
library("httr")
library("jsonlite")
#################################
#### Accessing the Data API #####
#################################
# Creates a variable for the base URI
base_uri <- "https://api.themoviedb.org/3"
# Creates an API key
api_key <- source("apikey.R")
# Defines a variable that is a list of URL parameters
key_param <- list("api_key" = tmdb_key)
# Gets the data
endpoint <- "/movie/550"
resource_uri <- paste0(base_uri, path)
resource <- GET(resource_uri, query = key_param)
resource_uri <- paste0(base_uri, endpoint)
resource <- GET(resource_uri, query = key_param)
library("httr")
library("jsonlite")
#################################
#### Accessing the Data API #####
#################################
# Creates variables for the base URI and an endpoint, and constructs a reusable resource uri
base_uri <- "https://api.themoviedb.org/3"
endpoint <- "/movie/550"
resource_uri <- paste0(base_uri, endpoint)
# Creates an API key
api_key <- source("apikey.R")
# Defines a variable that is a list of URL parameters
key_param <- list("api_key" = tmdb_key)
# Gets the data
resource <- GET(resource_uri, query = key_param)
View(resource)
response <- GET(resource_uri, query = key_param)
body <- content(response, "text")
data <- body$results
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
library("httr")
library("jsonlite")
#################################
#### Accessing the Data API #####
#################################
# Creates variables for the base URI and an endpoint, and constructs a reusable resource uri
base_uri <- "https://api.themoviedb.org/3"
endpoint <- "/movie/550"
resource_uri <- paste0(base_uri, endpoint)
# Creates an API key
api_key <- source("apikey.R")
# Defines a variable that is a list of URL parameters
key_param <- list("api_key" = tmdb_key)
# Gets the data
response <- GET(resource_uri, query = key_param)
body <- content(response, "text")
View(response)
setwd("~/Desktop/School/Uni/Wi_20/INFO_201/book-exercises/chapter-18-exercises/exercise-1")
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
api_key <- source("apikey.R")
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
api_key <- source("apikey.R")
library("httr")
library("jsonlite")
query_params <- list("api-key" = nyt_key)
endpoint <- "reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
source('~/Desktop/School/Uni/Wi_20/INFO_201/Assignments/a5-data-report-ahyc8u/analysis.R')
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
GET(resource_uri, query = query_params)
response <- GET(resource_uri, query = query_params)
body <- content(respon, "text")
data <- fromJSON(body)
response <- GET(resource_uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
response <- GET(resource_uri, query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
getOption("repos")
library(knitr)
# What kind of data structure did this produce? A data frame? A list?
class(data)
